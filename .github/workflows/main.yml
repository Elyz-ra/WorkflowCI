name: MLflow CI/CD Workflow (Skilled Level)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-train:
    runs-on: ubuntu-latest
    environment: Production
    env:
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies and setup conda
        run: |
          sudo apt-get install -y tree curl
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda env remove --name mlflow-ci-env || true
          conda env create -f MLProjects/conda.yaml
        shell: bash -l {0}

      - name: Start MLflow Server
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          mlflow server --host 127.0.0.1 --port 5001 --backend-store-uri sqlite:///mlruns.db --default-artifact-root ./mlruns &

          echo "Menunggu MLflow Server dimulai..."
          timeout_seconds=60
          start_time=$(date +%s)
          while ! curl -s http://127.0.0.1:5001 > /dev/null; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ "$elapsed" -ge "$timeout_seconds" ]; then
              echo "MLflow Server tidak dimulai dalam $timeout_seconds detik."
              exit 1
            fi
            echo "MLflow Server belum siap. Menunggu 5 detik..."
            sleep 5
          done
        shell: bash -l {0}

      - name: Run MLflow Project
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          export MLFLOW_TRACKING_URI="http://127.0.0.1:5001"
          mlflow run MLProjects -e main --experiment-name "Shipping Delay Prediction"
        shell: bash -l {0}

      - name: Get latest MLflow run_id
        id: get_run_id
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          python - <<EOF
          import os
          import mlflow

          mlflow.set_tracking_uri("http://127.0.0.1:5001")
          runs = mlflow.search_runs(
              experiment_names=["Shipping Delay Prediction"],
              order_by=["attribute.start_time DESC"],
              max_results=1
          )

          if not runs.empty:
              run_id = runs.loc[0, "run_id"]
              with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
                  fh.write(f"latest_run_id={run_id}\n")
          else:
              print("No runs found.")
          EOF

      - name: Download MLflow artifact to folder
        if: steps.get_run_id.outputs.latest_run_id != ''
        shell: bash -l {0}
        run: |
          mkdir -p artifacts/
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          export MLFLOW_TRACKING_URI="http://127.0.0.1:5001"

          mlflow artifacts download \
            --run-id ${{ steps.get_run_id.outputs.latest_run_id }} \
            --artifact-path xgboost_model \
            --dst-path artifacts/

      - name: Commit artifact to GitHub artifacts-storage branch
        if: steps.get_run_id.outputs.latest_run_id != ''
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          git fetch origin
          git checkout -B artifacts-storage

          mkdir -p artifacts/model_${{ steps.get_run_id.outputs.latest_run_id }}
          cp -r artifacts/xgboost_model/* artifacts/model_${{ steps.get_run_id.outputs.latest_run_id }}/

          git add artifacts/
          git commit -m "Add model artifact from run_id ${{ steps.get_run_id.outputs.latest_run_id }}" || echo "Nothing to commit"
          git push origin artifacts-storage
