name: MLflow CI/CD Workflow (Skilled Level)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-train:
    runs-on: ubuntu-latest
    environment: Production
    env:
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies and setup conda
        run: |
          sudo apt-get install -y tree curl
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda env remove --name mlflow-ci-env || true
          conda env create -f MLProjects/conda.yaml
        shell: bash -l {0}

      - name: Start MLflow Server
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          mlflow server --host 127.0.0.1 --port 5001 --backend-store-uri sqlite:///mlruns.db --default-artifact-root ./mlruns &

          echo "Menunggu MLflow Server dimulai..."
          timeout 60s bash -c 'until curl -s http://127.0.0.1:5001 > /dev/null; do echo "MLflow Server belum siap. Menunggu 5 detik..."; sleep 5; done'
        shell: bash -l {0}

      - name: Run MLflow Project
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          export MLFLOW_TRACKING_URI="http://127.0.0.1:5001"
          mlflow run MLProjects -e main --experiment-name "Shipping Delay Prediction"
        shell: bash -l {0}

      - name: Get latest MLflow run_id
        id: get_run_id
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          python - <<EOF
          import os
          import mlflow

          mlflow.set_tracking_uri("http://127.0.0.1:5001")
          runs = mlflow.search_runs(
              experiment_names=["Shipping Delay Prediction"],
              order_by=["attribute.start_time DESC"],
              max_results=1
          )

          if not runs.empty:
              run_id = runs.loc[0, "run_id"]
              print(f"Latest run_id found: {run_id}")
              with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
                  fh.write(f"latest_run_id={run_id}\n")
          else:
              print("No runs found.")
          EOF

      - name: Download MLflow artifact to folder
        if: steps.get_run_id.outputs.latest_run_id != ''
        shell: bash -l {0}
        run: |
          mkdir -p downloaded-artifact/
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate mlflow-ci-env
          export MLFLOW_TRACKING_URI="http://127.0.0.1:5001"

          # [FIX] Ganti artifact-path menjadi 'model' sesuai output dari autolog
          mlflow artifacts download \
            --run-id ${{ steps.get_run_id.outputs.latest_run_id }} \
            --artifact-path model \
            --dst-path downloaded-artifact/

          echo "Isi dari folder artefak yang diunduh:"
          tree downloaded-artifact/

      # [REPLACEMENT] Ganti langkah 'Commit artifact' dengan 'Upload artifact'
      - name: Upload Model Artifact to GitHub Actions
        if: steps.get_run_id.outputs.latest_run_id != ''
        uses: actions/upload-artifact@v4
        with:
          # Nama artefak yang akan muncul di halaman summary
          name: model-artifact-${{ steps.get_run_id.outputs.latest_run_id }}
          # Path ke folder yang berisi artefak yang sudah diunduh
          path: downloaded-artifact/model/